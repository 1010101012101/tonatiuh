#
# cmake -G"MSYS Makefiles"  ..
#

CMAKE_MINIMUM_REQUIRED (VERSION 3.0 FATAL_ERROR)

SET(PROJECT_NAME_STR tonatiuh)
PROJECT (${PROJECT_NAME_STR})

SET (${PROJECT_NAME_STR}_VERSION_MAJOR 3)
SET (${PROJECT_NAME_STR}_VERSION_MINOR 3.0)
add_definitions(-DAPP_VERSION="3.0.0")
add_definitions(-DUNICODE)

SET( CMAKE_POSITION_INDEPENDENT_CODE ON)

SET( CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

SET( CMAKE_BINARY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/build )

SET( CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR} )


# default built type
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: Debug Release." FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

INCLUDE_DIRECTORIES( "${PROJECT_BINARY_DIR}")


include_directories( ${CMAKE_BINARY_DIR} )
SET(CMAKE_INCLUDE_CURRENT_DIR ON)



# Build binary directory
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")



include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=gnu++17" COMPILER_SUPPORTS_CXX17) 
if(COMPILER_SUPPORTS_CXX17)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++17")
else()
    message(FATAL_ERROR "Compiler ${CMAKE_CXX_COMPILER} has no C++17 support.")
endif()

SET (CMAKE_CXX_FLAGS_RELEASE " ${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS} -fPIC -O3 -march=native -mfpmath=sse   ")
SET (CMAKE_CXX_FLAGS_DEBUG " ${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS} -fPIC -fprofile-arcs -ftest-coverage  ")
SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--export-all-symbols ")


ADD_SUBDIRECTORY(src/geometry)
ADD_SUBDIRECTORY(src/nodes)
ADD_SUBDIRECTORY(src/statistics)
ADD_SUBDIRECTORY(src/raytracing)
ADD_SUBDIRECTORY(src/source/application)